service: tydzien8-rest-vpc

plugins:
  - serverless-offline

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  lambdaHashingVersion: 20201221
  region: ${self:custom.deployment.myRegion.${self:custom.deployment.myStage}}
  profile: ${self:custom.deployment.myProfile.${self:custom.deployment.myStage}}
  environment:
    dynamoTableName: ${self:custom.dynamoTableName}
    SECRET_NAME: ${self:custom.rds.credentialsSecretName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - !Ref RDSCredentials
  vpc:
    securityGroupId:
      - !Ref LambdaSecurityGroup
    subnetIds:
      - !Ref SubnetAPrivate
      - !Ref SubnetBPrivate

custom:
  deployment: ${file(config/deployment.yml):deployment}
  dynamoTableName: ${self:service}-${self:custom.deployment.myStage}
  rds:
    dbName: serverless
    port: '3306'
    credentialsSecretName: /${self:custom.deployment.myStage}/databases/${self:custom.rds.dbName}

package:
  exclude:
    - http/**
    - config/**
    - '*'

functions:
  createSchema:
    handler: src/createSchema/function.handler
    description: Creates tables in DB
    memorySize: 128
    timeout: 10

  getAll:
    handler: src/function.getAll
    events:
      - http:
          path: products
          method: GET
        
  create:
    handler: src/function.create
    events:
      - http:
          path: products
          method: POST

  getById:
    handler: src/function.getById
    events:
      - http:
          path: products/{id}
          method: GET

  update:
    handler: src/function.update
    events:
      - http:
          path: products/{id}
          method: PUT

  delete:
    handler: src/function.delete
    events:
      - http:
          path: products/{id}
          method: DELETE

resources:
  Resources:
        # VPC, Subnets

    Vpc:
      Type: AWS::EC2::VPC
      Properties: 
        CidrBlock: 10.50.0.0/26
        Tags:
          - Key: Name
            Value: ${self:service}-${self:custom.deployment.myStage}-vpc

    SubnetPublic:
      Type: AWS::EC2::Subnet
      Properties: 
        CidrBlock: 10.50.0.0/28
        VpcId: !Ref Vpc
        Tags:
          - Key: Name
            Value: ${self:service}-${self:custom.deployment.myStage}-subnet-pub

    SubnetAPrivate:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select [0, !GetAZs '']
        CidrBlock: 10.50.0.16/28
        VpcId: !Ref Vpc
        Tags:
          - Key: Name
            Value: ${self:service}-${self:custom.deployment.myStage}-subnet-priv-a

    SubnetBPrivate:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select [1, !GetAZs '']
        CidrBlock: 10.50.0.32/28
        VpcId: !Ref Vpc
        Tags:
          - Key: Name
            Value: ${self:service}-${self:custom.deployment.myStage}-subnet-priv-b

    # Gateways, Elastic IP

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-${self:custom.deployment.myStage}-igw
    
    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties: 
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref Vpc

    NatGateway:
      Type: AWS::EC2::NatGateway
      Properties: 
        AllocationId: !GetAtt ElasticIp.AllocationId
        SubnetId: !Ref SubnetPublic
        Tags:
          - Key: Name
            Value: ${self:service}-${self:custom.deployment.myStage}-nat-gw

    ElasticIp:
      Type: AWS::EC2::EIP
      Properties: 
        Domain: vpc

    # Routing tables

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
        VpcId: !Ref Vpc
        Tags:
          - Key: Name
            Value: ${self:service}-${self:custom.deployment.myStage}-rt-pub

    InternetGatewayRoute:
      Type: AWS::EC2::Route
      Properties: 
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
        RouteTableId: !Ref PublicRouteTable

    PublicRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref SubnetPublic

    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
        VpcId: !Ref Vpc
        Tags:
          - Key: Name
            Value: ${self:service}-${self:custom.deployment.myStage}-rt-priv

    NatGatewayRoute:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway
        RouteTableId: !Ref PrivateRouteTable

    PrivateRouteTableAssociationA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PrivateRouteTable
        SubnetId: !Ref SubnetAPrivate

    PrivateRouteTableAssociationB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PrivateRouteTable
        SubnetId: !Ref SubnetBPrivate

    # Security groups

    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: Lambda security group
        VpcId: !Ref Vpc
        Tags:
          - Key: Name
            Value: ${self:service}-${self:custom.deployment.myStage}-sg-lambda

    RDSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: RDS security group
        SecurityGroupIngress:
          - FromPort: ${self:custom.rds.port}
            IpProtocol: tcp
            SourceSecurityGroupId: !Ref LambdaSecurityGroup
            ToPort: ${self:custom.rds.port}
        VpcId: !Ref Vpc
        Tags:
          - Key: Name
            Value: ${self:service}-${self:custom.deployment.myStage}-sg-rds

    # RDS-related stuff
    
    RDSSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties: 
        DBSubnetGroupDescription: Subnet group for the RDS
        SubnetIds:
          - !Ref SubnetAPrivate
          - !Ref SubnetBPrivate

    RDSCredentials:
      Type: AWS::SecretsManager::Secret
      Properties: 
        GenerateSecretString:
          ExcludePunctuation: true 
          GenerateStringKey: password
          PasswordLength: 30
          SecretStringTemplate: '{"username": "serverless"}'
        Name: ${self:custom.rds.credentialsSecretName}

    RDSCredentialsAttachment:
      Type: AWS::SecretsManager::SecretTargetAttachment
      Properties: 
        SecretId: !Ref RDSCredentials
        TargetId: !Ref RDSInstance
        TargetType: AWS::RDS::DBInstance

    RDSInstance:
      Type: AWS::RDS::DBInstance
      DeletionPolicy: Delete
      DependsOn: RDSCredentials
      Properties:
        AllocatedStorage: 20
        DBInstanceClass: db.t2.micro
        DBName: ${self:custom.rds.dbName}
        DBSubnetGroupName: !Ref RDSSubnetGroup
        DeleteAutomatedBackups: true
        Engine: mysql
        EngineVersion: 8.0.16
        MasterUsername: '{{resolve:secretsmanager:${self:custom.rds.credentialsSecretName}:SecretString:username}}'
        MasterUserPassword: '{{resolve:secretsmanager:${self:custom.rds.credentialsSecretName}:SecretString:password}}'
        MultiAZ: false
        Port: ${self:custom.rds.port}
        PubliclyAccessible: false
        StorageEncrypted: false
        StorageType: gp2
        VPCSecurityGroups: 
          - !Ref RDSSecurityGroup
        Tags:
          - Key: Name
            Value: ${self:service}-${self:custom.deployment.myStage}-mysql-db-instance
service: tydzien8-rest-vpc

plugins:
  - serverless-offline

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  lambdaHashingVersion: 20201221
  region: ${self:custom.deployment.myRegion.${self:custom.deployment.myStage}}
  profile: ${self:custom.deployment.myProfile.${self:custom.deployment.myStage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoTableName}"

custom:
  deployment: ${file(config/deployment.yml):deployment}
  dynamoTableName: ${self:service}-${self:custom.deployment.myStage}

package:
  exclude:
    - http/**
    - config/**
    - '*'

functions:
  getAll:
    handler: src/function.getAll
    events:
      - http:
          path: products
          method: GET
        
  create:
    handler: src/function.create
    events:
      - http:
          path: products
          method: POST

  getById:
    handler: src/function.getById
    events:
      - http:
          path: products/{id}
          method: GET

  update:
    handler: src/function.update
    events:
      - http:
          path: products/{id}
          method: PUT

  delete:
    handler: src/function.delete
    events:
      - http:
          path: products/{id}
          method: DELETE

resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.dynamoTableName}